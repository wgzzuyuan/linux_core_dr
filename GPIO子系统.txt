1，测试GPIO的时候是在 /sys 目录下，还是在 class 目录下？？？



2，led 的测试


3，按键的测试是在  /dev/input/ 目录下操作的，


4，为什么说是隔离输入指示灯呢？？？
有4个隔离输入，对应4个隔离输入指示灯，有输入的时候，就有灯亮或者灭，所以，叫隔离输入指示灯。

隔离输入指示灯



GPIO申请函数和赋值

我们控制虚拟地址，Linux内核根据
虚拟地址去找实际的物理地址，

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
20200724
1，怎么看驱动有没有被编译进内核？？？
生层了.o文件，编进了内核


2， GPIO的操作函数在哪里？？？
这些函数和平台无关，只和Linux系统有关，在 include/linux/gpio.h 文件中


3，
全志科技的GPIO真的和别的公司的不一样，包括测试代码和驱动代码，

全职科技的驱动把底层的驱动基本没有什么变化，要靠应用层来进行复杂的控制，基本没用什么ioctl


linuxGPIO申请函数和赋值函数
– gpio_request – gpio_set_value



4，  每个GPIO对应的组号：
PA_BASE 0
PB_BASE 32
PC_BASE 64
PD_BASE 96
PE_BASE 128
PF_BASE 160
PG_BASE 192
PH_BASE 224
PI_BASE 256
PJ_BASE 288
PK_BASE 320
PL_BASE 352
PM_BASE 384
PN_BASE 416
PO_BASE 448

例子中GPIO配置参数说明：（例子配置仅说明参数意义，不具备实际配置参考）
参数1：指向哪个PIO控制器，CPU域的GPIO使用&pio, CPUS域的GPIO使用&r_pio
参数2：指明哪个bank，（PA/PB/PC/...）
参数3：指明bank内索引号.
参数4：指明复用功能（0-GPIO IN; 1-GPIO_OUT 6-INTERRUPT）
参数5：指明上下拉配置
参数6：指明驱动力配置
参数7：指明电平配置



5,

用的全志科技的板子是 4核的CPU。

# cat /proc/interrupts     
           CPU0       CPU1       CPU2       CPU3       
 29:       1141       8399        480       6190       GIC  arch_timer
 30:          0          0          0          0       GIC  arch_timer
 32:          4          0          0          0       GIC  axp22_irq_chip
 33:        416          0          0          0       GIC  uart0
 39:       1242          0          0          0       GIC  twi0
 40:          0          0          0          0       GIC  twi1
 41:          0          0          0          0       GIC  twi2
 53:          0          0          0          0       GIC  Sunxi_keypad
 54:       3875          0          0          0       GIC  sunxi_timer
 56:          0          0          0          0       GIC  1c20400.rtc
 59:          0          0          0          0       GIC  1c02000.dma-controller
 60:          0          0          0          0       GIC  PIN_GRP
 63:     144982          0          0          0       GIC  sunxikbd
 66:       1137          0          0          0       GIC  sunxi-mmc
 70:          0          0          0          0       GIC  sunxi_usb_udc
 71:          0          0          0          0       GIC  ehci_hcd:usb1
 72:          0          0          0          0       GIC  ohci_hcd:usb4
 76:          0          0          0          0       GIC  dispaly
 85:          0          0          0          0       GIC  cedar_dev
 96:          0          0          0          0       GIC  ohci_hcd:usb5
 97:          0          0          0          0       GIC  ohci_hcd:usb6
 98:          0          0          0          0       GIC  mdfs
108:          0          0          0          0       GIC  ehci_hcd:usb2
110:          6         20         15         15       GIC  ehci_hcd:usb3
117:          0          0          0          0       GIC  1c50000.eth
128:          0          0          0          0       GIC  1000000.tr
129:          0          0          0          0       GIC  1c31000.tvd0
130:          0          0          0          0       GIC  1c32000.tvd1
131:          0          0          0          0       GIC  1c33000.tvd2
132:          0          0          0          0       GIC  1c34000.tvd3
IPI0:          0          0          0          0  CPU wakeup interrupts
IPI1:          0        752        654       1790  Timer broadcast interrupts
IPI2:       3363       2927       2671       2561  Rescheduling interrupts
IPI3:         87        118         45        122  Function call interrupts
IPI4:          0         12          1          5  Single function call interrupts
IPI5:          0          0          0          0  CPU stop interrupts
IPI6:          0          0          0          0  completion interrupts
IPI7:          0          0          0          0  CPU backtrace



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
平台驱动注册的时候，传参是传的结构体的首地址？？？

1，传参------传的是结构体的首地址和传参传的是指向结构体的指针，这2个有什么区别？？？

传参的时候传的是结构体和传参的时候传的是结构体，这2者的区别是什么？？？

把一个完整的结构体变量作为参数传递,要将全部成员值一个一个传递,费时间又费空间,开销大。

2，GPIO作为输入的时候，shell脚本的测试方法：

# echo 256  > /sys/class/gpio/export 
# echo in > /sys/class/gpio/gpio256/direction
# cat /sys/class/gpio/gpio256/value 
1


3， 内核驱动中，GPIO的函数 与 文件系统中，GPIO文件的位置的关系？？？ 

ｐＡｎＧ(346042205)  11:15:35
内核提供gpiolib来统一管理系统中所有的gpio，gpiolib本身属于驱动框架的一部分。

ｐＡｎＧ(346042205)  11:15:56
然后我去gpiolib.c里面找了一下

postcore_initcall(gpiolib_sysfs_init);
	static int __init gpiolib_sysfs_init(void)
		status = class_register(&gpio_class);
			static struct class gpio_class = {
				.name =		"gpio",
				.owner =	THIS_MODULE,

				.class_attrs =	gpio_class_attrs,
			};

ｐＡｎＧ(346042205)  11:17:20
就是因为有gpiolib的缘故 

所以在sysfs里面会有一类 class 是gpio

ｐＡｎＧ(346042205)  11:18:32
跟gpio相关的设备最终都会调用gpiochip_add函数去注册

ｐＡｎＧ(346042205)  11:19:34
可能就是因为有了gpiolib，而里面又进行了class_register的操作吧，所以能在sys/class/gpio里面操作与gpio相关的设备咯

4，  GPIO的文件是在/sys class 目录下，为什么别的设备在 /dev 目录下？？？比如，I2C,SPI，应用层是直接操作 /dev 下的文件。



5，GPIO目录下的架构是怎么走的？？？   

直接看I2C目录下的源码。
I2C目录下的架构是怎么走的，直接看I2C目录下的源码。

6， 文件系统中各个目录下的文件是怎么生成的？？？

是调用了文件系统的API，在 sys/clsss/gpio 目录下生成的文件
gpiod_export  →→→ sysfs_create_group  →→→ sysfs_create_subdir→→→create_files


7， proc 是个文件系统的名字，常见的文件系统有 ext2, yaffs ，



8， 





