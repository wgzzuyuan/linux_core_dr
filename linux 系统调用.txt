完全来自于百度百科，这个东西就很标准了，作为平时学习的一个参考。

函数名： system
功 能： 发出一个DOS命令

ioctl
功能： ioctl(input/output control)是一个专用于设备输入输出操作的系统调用,该调用传入一个跟设备有关的请求码，系统调用的功能完全取决于请求码。

int ioctl(int fd, ind cmd, …)；
cmd是用户程序对设备的控制命令，至于后面的省略号，那是一些补充参数，
函数功能：发送命令
函数返回值：成功，返回；失败，返回-EINVAL(非法参数)；


ioctl 的原理是根据命令对IO口进行管理，

ioctl(fd,FIONREAD,&size);
FIONREAD ： 通过由ioctl的第三个参数指向的整数返回当前在本套接口接收缓冲区中的字节数。本特性同样适用于文件，管道和终端。


  int size=0;
	ioctl(fd,FIONREAD,&size);
这个函数的功能是什么？？？

是发送命令

一定要用一下，这次，实战使用过程如下：



FD_ZERO(&rdfds);   
FD_SET(0,&rdfds);
FD_SET(fd, &rdfds);
ret = select(maxfd + 1, &rdfds, NULL, NULL, &tv);


FD_SET(rsfd, &fdR )用于在文件描述符集合中增加一个新的文件描述符。

FD_ISSET(fd, &rdfds)

FD_ISSET(0, &rdfds)

1， 内核中的ioctl 到底该怎么用？？？
%%%%%%这个函数的实现和file指针没啥关系，只要是命令和参数，函数的实现原理，主要是根据命令做具体的事情，比如说是1和0，在GPIO和LED中，

传入的参数是1，然后把这个1参数GPIO置一，置零。



static long hello_ioctl( struct file *files, unsigned int cmd, unsigned long arg){
	printk("cmd is %d,arg is %d\n",cmd,arg);
	
	switch(cmd)
	{
		case 0:
		case 1:
			if (arg > LED_NUM) {
				return -EINVAL;
			}

			gpio_set_value(led_gpios[arg], cmd);
			break;

		default:
			return -EINVAL;
	}
	
	gpio_set_value(led_gpios[2], 0);
	
	return 0;
}

2，应用层的ioctl 是怎么实现的？？？ 实现的原理是什么，是怎么调底层的函数的？？？



3，





































