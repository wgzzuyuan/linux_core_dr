1,I2C 板子中的 /proc/devoces 文件的作用是什么？？？

查看设备的主设备号


2，模块的初始化函数的功能是怎么被实现的？？？
module_init(motor_init);
module_exit(motor_exit);

3，为啥你没有生成 .o  或者 .ko 文件？？？
obj -y   生成.o文件
obj -m   生成.ko文件

把你单个的模块文件下面的Makefile ，
只写一行：obj -m lsc.o

obj $(CONFIG_LSC)  lsc.o

如果是这样的话，表示什么意思，是直接生成.o文件，那么是怎么生成.o文件的？？？


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%加噪编译好的模块到内核%%%%%%%%%%%%%%%%%%%%
1.insmod: can't insert 'led.ko': invalid module format    格式错误
原因：内核版本不一致





dmesg |tail                                        
[  605.800335] libphy: 1c50000.eth-0:01 - Link is Down
[  608.800248] libphy: 1c50000.eth-0:01 - Link is Up - 100/Full
[  620.800336] libphy: 1c50000.eth-0:01 - Link is Down
[  622.800328] libphy: 1c50000.eth-0:01 - Link is Up - 100/Full
[  828.800493] libphy: 1c50000.eth-0:01 - Link is Down
[  829.800554] libphy: 1c50000.eth-0:01 - Link is Up - 100/Full
[ 1798.725195] lsc: version magic '3.10.108 SMP mod_unload modversions ARMv7 p2v8 ' should be '3.10.65 SMP preempt mod_unload ARMv7 p2v8 '
[ 1798.725846] lsc: version magic '3.10.108 SMP mod_unload modversions ARMv7 p2v8 ' should be '3.10.65 SMP preempt mod_unload ARMv7 p2v8 '
[ 2571.195056] lsc: version magic '3.10.108 SMP mod_unload modversions ARMv7 p2v8 ' should be '3.10.65 SMP preempt mod_unload ARMv7 p2v8 '
[ 2571.195723] lsc: version magic '3.10.108 SMP mod_unload modversions ARMv7 p2v8 ' should be '3.10.65 SMP preempt mod_unload ARMv7 p2v8 '
# 


2，怎么选中  make menuconfig
Y是选择,N为删除,M为编译成模块。
用按键操作
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1，调试看I2C设备的信息

# ls /sys/bus/i2c/devices/
0-0034  1-0068  i2c-0   i2c-1   i2c-2
# ls /sys/bus/i2c/drivers/
axp20    axp22    dummy    hm5065   lkt_i2c


2，

linux 下 sys 文件夹
内存文件系统 proc ，dev， sys目录。
proc 是进程相关的文件
dev 目录存放的是设备节点，通过对应的文件就能找到相应的设备。
比如char 就是各种字符设备文件。

class create 是在sys/class/ 创建一个目录
而device_create 是在/sys/class/下创建一个设备文件。

这个时候由udev这个应用程序 检测到sys/class/ 有目录 有设备文件，就会在 dev 目录下创建一个同名的设备文件。
通过sys目录下对应的文件 可以直接操作驱动，进而操作硬件。
通过cat echo 可以读取和进行操作硬件。




通过sys目录下对应的文件 可以直接操作驱动，进而操作硬件。
通过cat echo 可以读取和进行操作硬件。

3，字符设备和设备树的关系？？？
把字符设备添加到设备树上  是什么意思？？？

4，Linux的sys的目录下放着什么文件？？？ 这个目录的功能是什么？？？

设备节点和sys 目录的关系，/dev 目录和设备节点的关系？？？什么是设备节点，设备节点的概念？？？

设备节点的功能：
在linux里面设备就像是普通文件一样的存在，访问一个设备就好像是访问一个文件一样。

节点的存在：
每个设备在 /dev 目录下都有一个对应的文件(节点)。

5，linxu 下/dev 目录下的节点是怎么来的？？？

三种Linux下如何创建设备节点的方法：


（1）/sys/class/下面某个目录下创建hello这个节点，可以通过调用以下函数：
示例：static DEVICE_ATTR(hello, S_IRUGO | S_IWUSR, hello_read, hello_wirte);

第一个参数：要创建的节点名字；
第二个参数：创建节点的权限；
第三个参数：向/sys/class/xxx/hello节点读取数据的时候，调用这个函数指针参数(读函数名称)；
第四个参数：向/sys/class/xxx/hello节点写入数据的时候，调用这个函数指针参数(写函数名称)；

（2）/proc目录下创建文件节点，可调用内核中的创建函数：
示例：struct proc_dir_entry *proc_create(const char *name, umode_t mode, struct proc_dir_entry *parent, const struct file_operations *proc_fops)
name: 表示要创建的节点名字；
mode: 表示创建节点的权限；
parent: 父entry，为NULL的话，默认父entry是/proc；
proc_fops:表示对这个文件节点进行读写操作的函数的结构体；
（3）调用内核函数sysfs_create_file(struct kobject *hellowold_kobj， struct kobj_attribute hello_value_attribute); 去创建文件节点，节点对应的读写函数，分别为show(),store()函数；


2，设备树和.ko的关系？？？

.ko这种驱动不是通过设备树添加的，这种就是用的时候挂载上，不用的时候卸载。



3，
































